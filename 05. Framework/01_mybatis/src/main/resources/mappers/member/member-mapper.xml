<?xml version="1.0" encoding="UTF-8"?>

<!-- ▼ Mapper 설정 파일임을 선언하는 영역 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
	◆ namespace 속성 : 외부에서 mapper 에 접근할 수 있는 이름(별칭)
                      ▷ 여러개 mapper 를 등록해도 구분 가능
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
<mapper namespace="memberMapper">

   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
   		▼ sql : 중복되는 쿼리 내용을 재사용하기 위한 SQL 조각
   			    단, 사용하려는 태그보다 항상 위에 있어야 함
  	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  	
	<sql id="selectMapperSql">
		SELECT NO, 
		       ID, 
		       PASSWORD, 
		       ROLE,
		       NAME, 
		       PHONE, 
		       EMAIL, 
		       ADDRESS, 
		       HOBBY, 
		       STATUS, 
		       ENROLL_DATE, 
		       MODIFY_DATE
			   FROM MEMBER
	</sql>
	
   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		▼ resultMap : DB의 조회 결과와 자바 클래스를 명시적으로 매핑할 때 사용
		            ▷ JDBC 코드를 줄여주는 역할
		            
			◆ type 속성 : ResultSet의 결과를 담을 자바 객체의 타입 기술 (또는 alias 사용)
			◆ id 속성   : resultMap의 고유 아이디로 select 문에서 resultMap 속성에 사용
  	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
  	
	<resultMap type="com.kh.mybatis.member.model.vo.Member" id="memberResultMap">
   
   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		    ◆ property : 자바 객체의 필드명 기술
		    ◆ column   : DB에서 select 구문에 지정된 컬럼명을 기술
		
		▼ id       : 테이블에서 기본 키 의미
		▼ result    : 테이블에서 일반 컬럼들을 의미
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
		<id property="no" column="NO"/>
		<result property="id" column="ID"/>
		<result property="password" column="PASSWORD"/>
		<result property="role" column="ROLE"/>
		<result property="name" column="NAME"/>
		<result property="phone" column="PHONE"/>
		<result property="email" column="EMAIL"/>
		<result property="address" column="ADDRESS"/>
		<result property="hobby" column="HOBBY"/>
		<result property="status" column="STATUS"/>
		<result property="enrollDate" column="ENROLL_DATE"/>
		<result property="modifyDate" column="MODIFY_DATE"/>
	</resultMap>
	
   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
   	
		▼ SELECT 구문 (파라미터 X)
		
			◆ id 속성 : 쿼리문의 고유 아이디
			◆ resultType 속성 : 쿼리 실행 후 조회 된 결과값의 자료형	 
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
	<select id="selectCount" resultType="_int">
		SELECT COUNT(*) FROM MEMBER
	</select>
	
   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		쿼리문의 수행 결과가 담긴 ResultSet은 resultType의 객체에 자동으로 mapping 되어 리턴
		단, 조회 결과의 컬럼명과 자바 클래스에서의 필드명이 동일해야 자동으로 mapping 됨 (단, 대소문자 구분 안함)
	 
	 	잘 담는 방법 & 해결방법 
	 	방법 1) 쿼리문에서 "as 별칭" 으로 조회되는 컬럼명을 변경
	 	   ▷ 단, 유지보수 문제로 비추천 o.o)p
	 	방법 2) resultMap을 이용해서 명시적으로 컬럼명과 변수명을 mappping 
	 	   ▶ 요거 추천합니다 ! ^.^)d 
	 	   
	                                    ▼ 풀패키지로 적어줘야 함
	<select id="selectAll" resultType="com.kh.mybatis.member.model.vo.Member">
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	 
	<select id="selectAll" resultMap="memberResultMap">
		
   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		방법 1) 
		SELECT NO, 
		       ID, 
		       PASSWORD, 
		       ROLE,
		       NAME, 
		       PHONE, 
		       EMAIL, 
		       ADDRESS, 
		       HOBBY, 
		       STATUS, 
		       ENROLL_DATE AS enrollDate, 
		       MODIFY_DATE AS modifyDate
		FROM MEMBER
		WHERE STATUS = 'Y'

		 방법 2)
		SELECT NO, 
		       ID, 
		       PASSWORD, 
		       ROLE,
		       NAME, 
		       PHONE, 
		       EMAIL, 
		       ADDRESS, 
		       HOBBY, 
		       STATUS, 
		       ENROLL_DATE, 
		       MODIFY_DATE
		FROM MEMBER
		WHERE STATUS = 'Y'
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
		  
		  <include refid="selectMapperSql" />
		  WHERE STATUS = 'Y'
	</select>
	
   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		 - 외부에서 매개변수로 받는 값이 있으면, 해당하는 매개변수의 타입을 지정해야 함 
		    (ex. 여기서는 id 를 받으니까, parameterType="string")
		 - 외부에서 매개변수로 받는 값은 #{변수명}으로 설정하여 값을 가져옴
		   ▷ #{ } 안에 들어가는 값은 Member 객체의 필드명과 동일해야 함
		     ▷ 자동으로 매핑해줌
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
	<select id="selectMemberById" parameterType="string" resultMap="memberResultMap">
		<include refid="selectMapperSql" />
		WHERE ID = #{id} AND STATUS = 'Y'
	</select>
	
   	<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
		▼ 데이터를 insert 후 PK 값을 받아오기 위해서 
           useGeneratedKeys, keyColumn, keyProperty 속성을 추가		
		  ◆ useGeneratedKeys : insert 후에 PK 값을 받아올 수 있도록 허용하는 속성
		  ◆ keyColumn        : 실제 PK에 해당하는 컬럼 지정하는 속성 (ex. 테이블의 컬럼 NO)
		  ◆ keyProperty      : PK값이 담길 파라미터 객체의 필드명을 지정하는 속성 (ex. Member 의 no)
	ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
	<insert id="insertMember" parameterType="Member"
			useGeneratedKeys="true" keyColumn="NO" keyProperty="no">
		INSERT INTO MEMBER (
		   NO, 
	       ID, 
	       PASSWORD, 
	       ROLE,
	       NAME, 
	       PHONE, 
	       EMAIL, 
	       ADDRESS, 
	       HOBBY, 
	       STATUS, 
	       ENROLL_DATE, 
	       MODIFY_DATE		
		) VALUES(
			SEQ_UNO.NEXTVAL, 
			#{id}, 
			#{password}, 
			DEFAULT, 
			#{name}, 
			#{phone}, 
			#{email}, 
			#{address},
			#{hobby},
			DEFAULT, 
			DEFAULT, 
			DEFAULT
		)
	</insert>
	
	<update id="updateMember" parameterType="Member" >
		UPDATE MEMBER
		SET
			NAME = #{name},
			PASSWORD = #{password},
			PHONE = #{phone},
			EMAIL = #{email},
			ADDRESS = #{address},
			HOBBY = #{hobby},
			MODIFY_DATE = SYSDATE
		WHERE NO = #{no}
	</update>
	
	<delete id="deleteMember" parameterType="_int">
		DELETE FROM MEMBER WHERE NO = #{no}
	</delete>
</mapper>
